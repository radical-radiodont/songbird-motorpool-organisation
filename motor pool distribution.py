# -*- coding: utf-8 -*-
"""
@author: Frederik Strid
Part of thesis project: ORGANISATION OF THE MOTOR POOL IN BIRDSONG MOTOR CONTROL

This script contains the code for plotting the distribution of all identified
motor units simultaneously, including the summed distribution.

It also contains a comparison of the summed distribution with those of other
motor pool studies.

This data is also present in fig. 3E-F and is essentially a redo of fig. 3I-J
from Adam et al. 2021 with additional motor unit data

"""
# %% PACKAGES
from matplotlib import pyplot as plt
import numpy as nmp
from scipy.optimize import curve_fit

# %% ALL MOTOR UNITS
# these are the identifiers of all motor units identified for all specimens
# the actual identifiers are irrevelant as only the size of the MUs are used
#### gw65
gw65_mu_1 = [158]
gw65_mu_2 = [156,157,19,69]
gw65_mu_3 = [33]
gw65_mu_4 = [60]
gw65_mu_5 = [68,75]
gw65_mu_6 = [39,63,28]
gw65_mu_7 = [146]
gw65_mu_8 = [147]
gw65_mu_9 = [15,74,93,94,99,120,121,127,129]
gw65_mu_10 = [40]
gw65_mu_11 = [64]
gw65_mu_12 = [8,11,84,101,113,81]
gw65_mu_13 = [91,92]

gw65_mus = [gw65_mu_1,gw65_mu_2,gw65_mu_3,gw65_mu_4,gw65_mu_5,gw65_mu_6,gw65_mu_7,gw65_mu_8,gw65_mu_9,gw65_mu_10,gw65_mu_11,gw65_mu_12,gw65_mu_13]

# converting to a list of MU sizes
gw65_mu_len = []
for ii in range(len(gw65_mus)):
    gw65_mu_len.append(len(gw65_mus[ii]))

#### gw64
gw64_mu_1 = [128,159,116,81,100,102]
gw64_mu_2 = [101]
gw64_mu_3 = [95]
gw64_mu_4 = [68,73,74,75,76]

gw64_mus = [gw64_mu_1,gw64_mu_2,gw64_mu_3,gw64_mu_4]

# converting to a list of MU sizes
gw64_mu_len = []
for ii in range(len(gw64_mus)):
    gw64_mu_len.append(len(gw64_mus[ii]))

#### gw55
gw55_mu_1 = [32]
gw55_mu_2 = [67]
gw55_mu_3 = [25,26,73,15]
gw55_mu_4 = [3,54,63]
gw55_mu_5 = [34,42,53]
gw55_mu_6 = [59]
gw55_mu_7 = [52,72]

gw55_mus = [gw55_mu_1,gw55_mu_2,gw55_mu_3,gw55_mu_4,gw55_mu_5,gw55_mu_6,gw55_mu_7]

# converting to a list of MU sizes
gw55_mu_len = []
for ii in range(len(gw55_mus)):
    gw55_mu_len.append(len(gw55_mus[ii]))

#### 7391
# s for specimen because variables cannot begin with a number
s7391_mu_1 = [14,121]
s7391_mu_3 = [64,92,97,98,106,110,179,187]
s7391_mu_4 = [119,112,117,13,128,190]
s7391_mu_5 = [16,17,198]
s7391_mu_6 = [151,103,94]
s7391_mu_7 = [206]
s7391_mu_8 = [130]
s7391_mu_9 = [136]
s7391_mu_10 = [152]
s7391_mu_11 = [133,153]
s7391_mu_12 = [132]
s7391_mu_13 = [35]
s7391_mu_14 = [47]
s7391_mu_15 = [162,163,193,199]
s7391_mu_16 = [73,74]
s7391_mu_17 = [53,63,77]
s7391_mu_18 = [11,188]
s7391_mu_19 = [109,79,19]

s7391_mus = [s7391_mu_1,s7391_mu_3,s7391_mu_4,s7391_mu_5,s7391_mu_6,s7391_mu_7,s7391_mu_8,s7391_mu_9,s7391_mu_10,s7391_mu_11,s7391_mu_12,s7391_mu_13,s7391_mu_14,s7391_mu_15,s7391_mu_16,s7391_mu_17,s7391_mu_18,s7391_mu_19]

# converting to a list of MU sizes
s7391_mu_len = []
for ii in range(len(s7391_mus)):
    s7391_mu_len.append(len(s7391_mus[ii]))

#### all mus
all_mus = gw65_mus+gw64_mus+gw55_mus+s7391_mus

mu_len = []
for ii in range(len(all_mus)):
    mu_len.append(len(all_mus[ii]))
    
# %% histograms

## GW65
plt.figure(figsize = (8,9))
plt.subplot2grid((6,1),(0,0))
plt.xticks(())
plt.yticks([7])
plt.ylim([0,7.5])

plt.hist(gw65_mu_len, bins = [1,2,3,4,5,6,7,8,9,10], edgecolor = 'black', rwidth = 0.8)

## GW64
plt.subplot2grid((7,1),(1,0))
plt.xticks(())
plt.yticks([7])
plt.ylim([0,7.5])

plt.hist(gw64_mu_len, bins = [1,2,3,4,5,6,7,8,9,10], edgecolor = 'black', rwidth = 0.8)

## GW55
plt.subplot2grid((7,1),(2,0))
plt.xticks(())
plt.yticks([7])
plt.ylim([0,7.5])

plt.hist(gw55_mu_len, bins = [1,2,3,4,5,6,7,8,9,10], edgecolor = 'black', rwidth = 0.8)

## 7391
plt.subplot2grid((7,1),(3,0))
plt.xticks(())
plt.yticks([7])
plt.ylim([0,7.5])

plt.hist(s7391_mu_len, bins = [1,2,3,4,5,6,7,8,9,10], edgecolor = 'black', rwidth = 0.8)

## summed distribution
plt.subplot2grid((7,1),(4,0),rowspan = 3)
plt.xlabel('Motor unit size (IN)')
plt.xticks([1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5],['1','2','3','4','5','6','7','8','9'])
plt.ylabel('Count')
plt.yticks([1,3,5,7,9,11,13,15,17,19])
plt.text(6,16,'Summed distribution')

plt.hist(mu_len, bins = [1,2,3,4,5,6,7,8,9,10], edgecolor = 'black', rwidth = 0.8)

plt.tight_layout()

# %% Curve fitting & comparison to other studies

# sorting so that the curve-fitting works
mu_len.sort()

# normalising for easy comparison
adam_norm = []
for ii in mu_len:
    adam_norm.append(ii/max(mu_len))

x = nmp.arange(0,1,1/len(mu_len))
y = adam_norm

#### curve fitting
## following guide from https://rowannicholls.github.io/python/mathematics/curve_fitting/exponential.html
a_guess = 1
b_guess = 0.6
c_guess = 1

# Fit the function a * np.exp(b * t) + c to x and y
popt, pcov = curve_fit(
    lambda t, a, b, c: a * nmp.exp(b * t) + c,
    x, y, p0=(a_guess, b_guess, c_guess)
)

# The optimised values of the parameters are
a = popt[0]
b = popt[1]
c = popt[2]

# Create the fitted curve
x_fitted = nmp.linspace(nmp.min(x), nmp.max(x), 42)
y_fitted = a * nmp.exp(b * x_fitted) + c

# Plot
ax = plt.axes()
ax.plot(x, y, 'o', label='Raw data', mfc = 'none')
ax.plot(x_fitted, y_fitted, 'k', label='Fitted curve')
plt.xticks([0,1])
ax.set_xlabel('Normalised motor unit')
plt.yticks([0,1])
ax.set_ylim(0,1.1)
ax.set_ylabel('Normalised motor unit size (IN)')

# calculating r-squared
residuals = y-y_fitted
ss_res = nmp.sum(residuals**2)
ss_tot = nmp.sum((y - nmp.mean(y))**2)

# R-squared
r_squared = 1 - (ss_res / ss_tot)

plt.text(0.4,1, 'R${^2}$ = %.3f'%r_squared)

#### comparing with other studies
# these values are pulled from similar curve fits done by Adam et al. 2021

# data from Olson & Swett 1966 (force stimulation)
os2_x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107]
os2_y = [0.100289614,0.106474931,0.113041724,0.120013521,0.1274153,0.135273581,0.143616518,0.152474002,0.161877767,0.171861505,0.182460985,0.193714184,0.205661418,0.218345493,0.231811852,0.246108743,0.261287389,0.27740217,0.294510823,0.312674645,0.331958712,0.352432115,0.374168206,0.39724486,0.421744757,0.447755674,0.475370802,0.504689081,0.535815552,0.568861733,0.603946023,0.64119412,0.680739477,0.722723776,0.767297438,0.814620159,0.864861489,0.918201429,0.974831086,1.034953352,1.098783631,1.166550614,1.238497094,1.314880842,1.395975522,1.48207168,1.573477779,1.670521308,1.773549953,1.882932843,1.999061873,2.122353109,2.253248275,2.392216342,2.539755201,2.696393452,2.862692297,3.039247548,3.226691763,3.425696516,3.636974797,3.86128357,4.099426485,4.352256756,4.62068022,4.905658579,5.208212849,5.529427017,5.870451924,6.232509387,6.61689658,7.024990679,7.458253796,7.91823822,8.406591975,8.925064727,9.475514051,10.05991209,10.68035261,11.33905852,12.03838981,12.78085205,13.56910531,14.40597374,15.29445564,16.23773426,17.23918917,18.30240835,19.43120109,20.62961162,21.90193357,23.2527254,24.6868267,26.20937556,27.82582692,29.54197219,31.36395994,33.29831796,35.35197664,37.53229378,39.847081,42.30463167,44.91375066,47.68378588,50.62466178,53.74691486,57.06173148]
os2_y_norm = []
for ii in os2_y:
    os2_y_norm.append(ii/max(os2_y))
os2_x_norm = []
for ii in os2_x:
    os2_x_norm.append(ii/max(os2_x))

# Milner-Brown 1973 (force stimulation)
mb_x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136]
mb_y = [0.108620691,0.111970968,0.11542458,0.118984715,0.122654658,0.126437797,0.130337621,0.134357731,0.138501837,0.142773763,0.147177451,0.151716966,0.156396497,0.161220362,0.166193014,0.171319041,0.176603175,0.182050292,0.187665418,0.193453736,0.199420589,0.205571481,0.211912091,0.21844827,0.225186049,0.232131647,0.239291473,0.246672137,0.254280448,0.262123428,0.270208316,0.278542573,0.287133889,0.295990196,0.305119664,0.31453072,0.324232049,0.334232604,0.344541614,0.355168594,0.36612335,0.377415993,0.389056944,0.401056946,0.413427074,0.426178745,0.439323725,0.452874147,0.466842516,0.481241722,0.496085055,0.511386214,0.527159318,0.543418925,0.560180041,0.577458133,0.595269148,0.613629522,0.632556201,0.65206665,0.672178877,0.692911441,0.714283477,0.736314708,0.759025467,0.782436711,0.806570049,0.83144775,0.857092775,0.88352879,0.910780193,0.938872134,0.967830537,0.997682128,1.028454456,1.06017592,1.092875795,1.12658426,1.161332422,1.19715235,1.234077102,1.272140754,1.311378435,1.351826355,1.393521844,1.436503381,1.480810633,1.52648449,1.573567103,1.622101923,1.672133743,1.723708736,1.776874498,1.831680095,1.888176106,1.94641467,2.006449534,2.068336103,2.132131489,2.197894569,2.265686034,2.335568446,2.407606299,2.481866075,2.558416306,2.637327638,2.718672897,2.802527155,2.888967798,2.978074601,3.069929798,3.164618161,3.262227074,3.362846619,3.466569655,3.573491906,3.683712047,3.797331799,3.914456017,4.035192795,4.159653555,4.287953161,4.420210017,4.556546179,4.69708747,4.841963591,4.991308245,5.145259258,5.303958709,5.467553057,5.63619328,5.810035011,5.989238686,6.173969686,6.364398497,6.560700859]
mb_y_norm = []
for ii in mb_y:
    mb_y_norm.append(ii/max(mb_y))
mb_x_norm = []
for ii in mb_x:
    mb_x_norm.append(ii/max(mb_x))

# McPhedran et al. 1965 (force stimulation)
mcphe_x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97]
mcphe_y = [4.35455833,4.447487544,4.542399931,4.639337811,4.738344412,4.839463881,4.942741307,5.048222743,5.155955224,5.265986789,5.378366502,5.493144474,5.610371886,5.730101009,5.852385233,5.977279084,6.104838255,6.235119625,6.368181286,6.504082574,6.642884087,6.784647718,6.92943668,7.077315537,7.228350228,7.382608101,7.540157942,7.701070003,7.865416035,8.033269323,8.204704713,8.379798651,8.558629211,8.741276136,8.927820869,9.118346594,9.312938265,9.511682655,9.714668384,9.921985965,10.13372784,10.34998844,10.57086418,10.79645355,11.02685716,11.26217774,11.50252021,11.74799176,11.99870183,12.25476223,12.51628713,12.78339315,13.05619939,13.33482749,13.61940172,13.91004894,14.20689878,14.51008359,14.81973857,15.13600179,15.45901429,15.78892009,16.1258663,16.47000317,16.82148416,17.18046599,17.54710873,17.92157588,18.3040344,18.69465485,19.09361141,19.50108197,19.91724822,20.34229574,20.77641406,21.21979677,21.67264155,22.13515036,22.60752941,23.08998935,23.58274531,24.08601701,24.60002887,25.1250101,25.66119477,26.20882199,26.76813595,27.33938604,27.92282699,28.51871897,29.12732768,29.74892452,30.38378665,31.03219717,31.69444521,32.37082606,33.06164134]
mcphe_y_norm = []
for ii in mcphe_y:
    mcphe_y_norm.append(ii/max(mcphe_y))
mcphe_x_norm = []
for ii in mcphe_x:
    mcphe_x_norm.append(ii/max(mcphe_x))

# Elek et al. 1992 (force stimulation)
elek_x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209]
elek_y = [0.822197142,0.839891148,0.857965935,0.876429699,0.895290811,0.914557821,0.934239465,0.954344665,0.974882537,0.995862392,1.017293742,1.039186303,1.061550001,1.084394974,1.10773158,1.131570399,1.155922238,1.180798139,1.206209379,1.232167479,1.258684207,1.285771586,1.313441895,1.341707681,1.370581758,1.400077216,1.430207427,1.460986053,1.492427047,1.524544663,1.557353464,1.590868322,1.625104433,1.660077319,1.695802835,1.732297179,1.769576895,1.807658885,1.846560414,1.88629912,1.926893018,1.968360513,2.010720405,2.053991898,2.09819461,2.143348583,2.189474286,2.236592633,2.284724986,2.333893165,2.384119463,2.435426651,2.487837989,2.54137724,2.596068677,2.651937095,2.709007823,2.767306736,2.826860264,2.887695408,2.949839747,3.013321458,3.078169319,3.144412733,3.21208173,3.281206991,3.351819855,3.423952335,3.497637135,3.57290766,3.649798037,3.728343124,3.808578533,3.89054064,3.974266603,4.059794382,4.147162752,4.236411324,4.32758056,4.420711794,4.515847249,4.613030056,4.712304276,4.813714915,4.917307951,5.023130351,5.131230089,5.241656177,5.354458677,5.469688732,5.587398583,5.707641595,5.830472285,5.95594634,6.084120645,6.215053312,6.348803701,6.485432451,6.625001506,6.767574141,6.913214996,7.061990099,7.213966901,7.369214303,7.52780269,7.689803962,7.855291564,8.024340525,8.197027486,8.373430738,8.553630258,8.737707742,8.925746646,9.11783222,9.314051552,9.514493601,9.719249242,9.928411304,10.14207462,10.36033605,10.58329455,10.81105121,11.04370928,11.28137424,11.52415385,11.77215816,12.02549963,12.28429311,12.54865592,12.81870793,13.09457156,13.37637189,13.66423667,13.95829641,14.25868443,14.56553692,14.878993,15.19919478,15.52628742,15.86041922,16.20174168,16.55040952,16.90658084,17.2704171,17.64208327,18.02174783,18.40958292,18.80576438,19.21047182,19.62388872,20.04620252,20.47760467,20.91829077,21.36846061,21.82831827,22.29807226,22.77793554,23.26812566,23.76886487,24.28038018,24.8029035,25.33667173,25.88192686,26.43891609,27.00789195,27.5891124,28.18284094,28.78934675,29.4089048,30.04179599,30.68830724,31.34873167,32.0233687,32.71252417,33.41651055,34.13564698,34.87025952,35.6206812,36.38725226,37.17032023,37.97024012,38.78737461,39.62209415,40.47477718,41.34581029,42.23558837,43.14451483,44.07300174,45.02147006,45.99034978,46.98008018,47.99110996,49.02389751,50.07891104,51.15662889,52.25753964,53.38214242,54.5309471,55.70447451,56.90325669,58.12783713,59.37877103,60.65662551,61.96197992,63.29542608,64.65756852,66.04902479,67.47042576,68.92241583]
elek_y_norm = []
for ii in elek_y:
    elek_y_norm.append(ii/max(elek_y))
elek_x_norm = []
for ii in elek_x:
    elek_x_norm.append(ii/max(elek_x))

# Hirst & Ribchester 2013 (connectome)
hirst_x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
hirst_y = [11.51455611,12.3735011,13.29652033,14.28839351,15.35425691,16.49962994,17.73044372,19.05307185,20.47436333,22.0016781,23.64292513,25.40660337,27.30184573,29.33846644,31.52701182,33.87881492,36.40605417,39.12181649,42.04016503,45.17621201,48.54619695,52.1675708,56.05908628,60.24089498,64.73465177,69.56362684,74.7528263,80.32912161,86.32138874,92.76065772,99.68027328]
hirst_y_norm = []
for ii in hirst_y:
    hirst_y_norm.append(ii/max(hirst_y))
hirst_x_norm = []
for ii in hirst_x:
    hirst_x_norm.append(ii/max(hirst_x))

# Lu et al. 2009 (connectome)
lu_x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87]
lu_y = [3.880813522,3.975947224,4.073413021,4.17326808,4.275570971,4.380381701,4.487761745,4.597774089,4.71048326,4.825955366,4.94425814,5.06546097,5.189634949,5.316852911,5.447189476,5.580721093,5.717526084,5.857684693,6.00127913,6.148393621,6.299114455,6.453530037,6.611730941,6.773809959,6.939862159,7.109984938,7.284278083,7.462843824,7.645786901,7.833214617,8.02523691,8.221966409,8.423518507,8.630011424,8.841566278,9.058307158,9.280361192,9.507858627,9.740932901,9.979720724,10.22436216,10.4750007,10.73178335,10.99486074,11.26438717,11.54052073,11.82342339,12.11326108,12.41020382,12.71442576,13.02610536,13.34542543,13.67257326,14.00774075,14.35112448,14.70292588,15.06335128,15.4326121,15.81092492,16.19851166,16.59559963,17.00242177,17.41921668,17.84622884,18.28370872,18.73191292,19.19110433,19.66155229,20.14353274,20.6373284,21.14322889,21.66153095,22.19253859,22.73656328,23.29392411,23.86494801,24.4499699,25.04933293,25.66338866,26.29249727,26.93702775,27.59735816,28.27387582,28.96697753,29.67706983,30.40456924,31.14990246]
lu_y_norm = []
for ii in lu_y:
    lu_y_norm.append(ii/max(lu_y))
lu_x_norm = []
for ii in lu_x:
    lu_x_norm.append(ii/max(lu_x))

# adding them to the plot
plt.plot(os2_x_norm,os2_y_norm,'--',alpha = 0.3,label = 'Olson & Swett')
plt.plot(mb_x_norm,mb_y_norm,'--',alpha = 0.3, label = 'Milner-Brown')
plt.plot(mcphe_x_norm,mcphe_y_norm,'--',alpha = 0.3, label = 'McPhedran')
plt.plot(elek_x_norm,elek_y_norm,'--',alpha = 0.3, label = 'Elek')
plt.plot(hirst_x_norm,hirst_y_norm,'--',alpha = 0.3, label = 'Hirst & Ribchester')
plt.plot(lu_x_norm,lu_y_norm,'--',alpha = 0.3, label = 'Lu')
plt.legend()